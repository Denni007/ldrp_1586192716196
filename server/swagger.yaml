# 
# Generated by
# 
#      _____ _          __  __      _     _
#     / ____| |        / _|/ _|    | |   | |
#    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
#     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
#     ____) |   < (_| | | | || (_) | | (_| |  __/ |
#    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
#
# The code generator that works in many programming languages
#
#			https://www.skaffolder.com
#
#
# You can generate the code from the command-line
#       https://npmjs.com/package/skaffolder-cli
#
#       npm install -g skaffodler-cli
#
#   #   #   #   #   #   #   #   #   #   #   #   #   #   #   #
#
# To remove this comment please upgrade your plan here: 
#      https://app.skaffolder.com/#!/upgrade
#
# Or get up to 70% discount sharing your unique link:
#       https://app.skaffolder.com/#!/register?friend=5e5c1e0652a8e9561a0d2dba
#
# You will get 10% discount for each one of your friends
# 
#

openapi: 3.0.0
info:
  title: ldrp
  description: You can obtain JWT token from login API
  version: 0.1
servers:
  - url: http://localhost:3000/api
    description: Local server for testing
paths:
  /login:
    post:
      summary: Login API
      security: []   # No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              example:   # Sample object
                username: admin
                password: 62f264d7ad826f02a8af714c0a54b197935b717656b80461686d450f7b3abde4c553541515de2052b9af70f710f0cd8a1a2d3f4d60aa72608d71a63a9a93c0f5
      responses:
        '200':
          description: OK
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /verifyToken:
    post:
      summary: Verify token API
      security: [] #No security
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /changePassword:
    post:
      summary: Change password API
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordOld:
                  type: string
      responses:
        '200':
          description: OK
                

  #-----  User  -----
  /user/{id}/changePassword:
    post:
      summary: Change password of user from admin
      tags:
        - User
      responses:
        "200":
          description: OK
    
  /user/:
    post:
      summary: CRUD ACTION create
      tags:
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mail:
                  type: string
                name:
                  type: string
                password:
                  type: string
                roles:
                  type: string
                surname:
                  type: string
                username:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    
  /user/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      summary: CRUD ACTION update
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    
  #-----  batch  -----
  /batch/:
    post:
      summary: CRUD ACTION create
      tags:
        - batch
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batch"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                batch:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - batch
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/batch"
    
  /batch/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - batch
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - batch
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batch"
    post:
      summary: CRUD ACTION update
      tags:
        - batch
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/batch"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/batch"
    
  #-----  branch  -----
  /branch/:
    post:
      summary: CRUD ACTION create
      tags:
        - branch
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/branch"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - branch
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/branch"
    
  /branch/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - branch
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - branch
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/branch"
    post:
      summary: CRUD ACTION update
      tags:
        - branch
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/branch"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/branch"
    
  #-----  professor  -----
  /professor/:
    post:
      summary: CRUD ACTION create
      tags:
        - professor
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/professor"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                contact_no:
                  type: number
                email:
                  type: string
                f_name:
                  type: string
                l_name:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - professor
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/professor"
    
  /professor/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - professor
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - professor
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/professor"
    post:
      summary: CRUD ACTION update
      tags:
        - professor
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/professor"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/professor"
    
  /professor/findBy_batch/{key}:
    get:
      summary: CRUD ACTION findBy_batch
      tags:
        - professor
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/professor"
    
  /professor/findBy_student/{key}:
    get:
      summary: CRUD ACTION findBy_student
      tags:
        - professor
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/professor"
    
  /professor/findBy_subject/{key}:
    get:
      summary: CRUD ACTION findBy_subject
      tags:
        - professor
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/professor"
    
  #-----  result  -----
  /result/:
    post:
      summary: CRUD ACTION create
      tags:
        - result
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/result"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mark:
                  type: number
    get:
      summary: CRUD ACTION list
      tags:
        - result
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/result"
    
  /result/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - result
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - result
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/result"
    post:
      summary: CRUD ACTION update
      tags:
        - result
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/result"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/result"
    
  /result/findBybranch/{key}:
    get:
      summary: CRUD ACTION findBybranch
      tags:
        - result
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/result"
    
  /result/findByprofessor/{key}:
    get:
      summary: CRUD ACTION findByprofessor
      tags:
        - result
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/result"
    
  /result/findBysem/{key}:
    get:
      summary: CRUD ACTION findBysem
      tags:
        - result
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/result"
    
  /result/findBystudent/{key}:
    get:
      summary: CRUD ACTION findBystudent
      tags:
        - result
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/result"
    
  #-----  semester  -----
  /semester/:
    post:
      summary: CRUD ACTION create
      tags:
        - semester
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/semester"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                semester:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - semester
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/semester"
    
  /semester/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - semester
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - semester
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/semester"
    post:
      summary: CRUD ACTION update
      tags:
        - semester
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/semester"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/semester"
    
  /semester/findBybranch/{key}:
    get:
      summary: CRUD ACTION findBybranch
      tags:
        - semester
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/semester"
    
  /semester/findByresult/{key}:
    get:
      summary: CRUD ACTION findByresult
      tags:
        - semester
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/semester"
    
  /semester/findBysubject/{key}:
    get:
      summary: CRUD ACTION findBysubject
      tags:
        - semester
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/semester"
    
  #-----  student  -----
  /student/:
    post:
      summary: CRUD ACTION create
      tags:
        - student
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Address:
                  type: string
                Birthdate:
                  type: string
                Branch:
                  type: string
                Gender:
                  type: string
                Name:
                  type: string
                Phonenumer:
                  type: number
    get:
      summary: CRUD ACTION list
      tags:
        - student
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
    
  /student/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - student
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - student
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student"
    post:
      summary: CRUD ACTION update
      tags:
        - student
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/student"
    
  /student/findBy_result/{key}:
    get:
      summary: CRUD ACTION findBy_result
      tags:
        - student
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
    
  /student/findBy_subject/{key}:
    get:
      summary: CRUD ACTION findBy_subject
      tags:
        - student
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
    
  /student/findBy_teacher/{key}:
    get:
      summary: CRUD ACTION findBy_teacher
      tags:
        - student
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
    
  /student/findBybatch/{key}:
    get:
      summary: CRUD ACTION findBybatch
      tags:
        - student
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
    
  /student/findBybranch/{key}:
    get:
      summary: CRUD ACTION findBybranch
      tags:
        - student
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
    
  /student/findBysemester/{key}:
    get:
      summary: CRUD ACTION findBysemester
      tags:
        - student
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/student"
    
  #-----  subject  -----
  /subject/:
    post:
      summary: CRUD ACTION create
      tags:
        - subject
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/subject"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                sub_id:
                  type: string
    get:
      summary: CRUD ACTION list
      tags:
        - subject
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/subject"
    
  /subject/{id}:
    delete:
      summary: CRUD ACTION delete
      tags:
        - subject
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
    get:
      summary: CRUD ACTION get
      tags:
        - subject
      parameters:
        - name: id
          in: path
          description: Id resource
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/subject"
    post:
      summary: CRUD ACTION update
      tags:
        - subject
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/subject"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/subject"
    
  /subject/findBybranch/{key}:
    get:
      summary: CRUD ACTION findBybranch
      tags:
        - subject
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/subject"
    
  /subject/findByprofessor/{key}:
    get:
      summary: CRUD ACTION findByprofessor
      tags:
        - subject
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/subject"
    
  /subject/findBysemester/{key}:
    get:
      summary: CRUD ACTION findBysemester
      tags:
        - subject
      parameters:
        - name: key
          in: path
          description: Id of model to search for
          required: true
          schema:
            type: Objectid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/subject"
    
    
  #-----  User  -----
  /Users/{id}/changePassword:
    post:
      summary: Change password by admin API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                passwordNew:
                  type: string
                passwordAdmin:
                  type: string
      responses:
        '200':
          description: OK
  /Users/{id}:
    post:
      summary: Update User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    delete:
      summary: Delete User API
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: Id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /Users:
    post:
      summary: Create User API
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: 'string'
                password: 
                  type: 'string'
                mail: 
                  type: 'string'
                name: 
                  type: 'string'
                surname: 
                  type: 'string'
                roles: 
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    
# JWT security
security:
  - bearerAuth: [] 
  
  
# Components
components:

  # Security
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  # Data Model
  schemas:
    User:
      properties:
        username:
          type: 'string'
        password: 
          type: 'string'
        mail: 
          type: 'string'
        name: 
          type: 'string'
        surname: 
          type: 'string'
        roles: 
          type: array
          items:
            type: string
      required:
        - username
        - password
        

    User:
      properties:
        _id:
          type: string
        mail:
          type: string
        name:
          type: string
        password:
          type: string
        roles:
          type: string
        surname:
          type: string
        username:
          type: string
      required:
        -  _id
        - password
        - username
      
    
    batch:
      properties:
        _id:
          type: string
        batch:
          type: string
      required:
        -  _id
      
    
    branch:
      properties:
        _id:
          type: string
        name:
          type: string
      required:
        -  _id
      
    
    professor:
      properties:
        _id:
          type: string
        address:
          type: string
        contact_no:
          type: number
        email:
          type: string
        f_name:
          type: string
        l_name:
          type: string
      required:
        -  _id
      
    
    result:
      properties:
        _id:
          type: string
        mark:
          type: number
      required:
        -  _id
      
    
    semester:
      properties:
        _id:
          type: string
        semester:
          type: string
      required:
        -  _id
      
    
    student:
      properties:
        _id:
          type: string
        Address:
          type: string
        Birthdate:
          type: string
        Branch:
          type: string
        Gender:
          type: string
        Name:
          type: string
        Phonenumer:
          type: number
      required:
        -  _id
      
    
    subject:
      properties:
        _id:
          type: string
        name:
          type: string
        sub_id:
          type: string
      required:
        -  _id
      
    
